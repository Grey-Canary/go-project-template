basePath: /v1
definitions:
  domain.User:
    description: User base model
    properties:
      email:
        example: johnwick@mail.com
        type: string
      first_name:
        example: John
        type: string
      last_name:
        example: Wick
        type: string
      uuid:
        example: 3fe82b1f-ab3d-40a1-8bd8-bccd4dd166f8
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:5000
info:
  contact:
    email: dev@greycanary.io
    name: API Support
    url: https://greycanary.io
  description: Primary backend services the Project.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Project
  version: 0.0.1
paths:
  /users:
    get:
      description: Accepts pagination based query parameters and returns a paginated
        response.
      parameters:
      - description: page number
        format: page
        in: query
        name: page
        type: integer
      - description: number of elements per page
        format: size
        in: query
        name: size
        type: integer
      - description: filter name
        format: orderBy
        in: query
        name: orderBy
        type: string
      - description: filter name
        format: orderDir
        in: query
        name: orderDir
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.User'
            type: array
        "400":
          description: Bad Request
      summary: Get List of Users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Accepts a JSON model and on conflict of a present UUID will instead
        update the user fields
      parameters:
      - description: User
        in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/domain.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
      summary: Create or Update User
      tags:
      - Users
  /users/{userid}:
    delete:
      description: Accepts an ID and processes the delete. Returns a 200 header if
        no errors occured during the delete.
      parameters:
      - description: userid
        in: path
        name: userid
        required: true
        type: string
      responses:
        "200":
          description: OK
      summary: Delete User
      tags:
      - Users
    get:
      description: Accepts an ID and returns a JSON model
      parameters:
      - description: userid
        in: path
        name: userid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.User'
      summary: Get User
      tags:
      - Users
swagger: "2.0"
